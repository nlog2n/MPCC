[Identification]
    OptionType = NetAdapter
[PlatformsSupported]
    ISA
    EISA
    PCMCIA
    "Jazz-Internal Bus"
[Options]
    MPCC
    
[FileConstants]
UtilityInf      = "UTILITY.INF"
ParamInf        = "NCPARAM.INF"
subroutineinf   = "SUBROUTN.INF"
SoftwareType    = "driver"
Exit_Code       = 0
NetEventDLL     = "%SystemRoot%\System32\netevent.dll"
IoLogMsgDLL     = "%SystemRoot%\System32\IoLogMsg.dll"
Manufacturer    = "Microsoft"
ProductMajorVersion     = "3"
ProductMinorVersion     = "51"
ProductVersion  = $(ProductMajorVersion)"."$(ProductMinorVersion)
ProductSoftwareName     = "MPCC"
ProductSoftwareImagePath = "\SystemRoot\System32\drivers\mpcc.sys"
NetRuleSoftwareType     = "mpccSys ndisDriver mpccDriver"
NetRuleSoftwareUse      = $(SoftwareType)
NetRuleSoftwareBindForm = """mpccSys"" yes no container"
NetRuleSoftwareClass    = {"mpccDriver basic"}
NetRuleSoftwareBindable = {"mpccDriver mpccAdapter non exclusive 100"} 
ProductHardwareName     = "MPCC"
NetRuleHardwareType     = "mpcc mpccAdapter"
NetRuleHardwareBindForm = " yes yes container"
NetRuleHardwareClass    = {"mpccAdapter basic"}
ProductKeyName  = $(!NTN_SoftwareBase)"\"$(Manufacturer)"\"$(ProductSoftwareName)"\CurrentVersion"
ParamKeyName    = $(!NTN_ServiceBase)"\"$(ProductHardwareName)"\Parameters"
;GHL
    RAM_Addr_List           = {851968, 868352, 884736, 819200}
    IO_Addr_List           = {768,784,800,816,832,848,864}
    IRQ_List                = {15, 12, 11, 10, 9, 5, 4, 3}


    BAUDRATE_List           = {1200,2400,4800,9600,19200,38400,64000}
    LINKTYPE_List           = {"LINK_NOTUSED","LAPB","SDLC_PRI","SDLC_SEC"}
    LINKCLK_LIST            = {"CLK_INT","CLK_EXT"}
    LINKDEV_LIST            = {"DEV_DTE","DEV_DCE"}
    LINKMODUL_LIST          = {"MODUL_8","MODUL_128"}
    COMMCODE_LIST           = {"CODE_NRZ","CODE_NRZI"}
    LINKWIN_LIST            = {1,2,3,4,5,6,7}
;LINKN2
;LINKT1
;FRAMELEN
;LINKADDR
    LINKADDR0               = 1
    LINKADDR1           =       1
	LINKN20         =       5
	LINKN21         =       5
	LINKT10         =       3
	LINKT11         =       3
	FRAMELEN0       =       133
	FRAMELEN1       =       133
	BAUDRATE0       =       9600
	BAUDRATE1       =       9600
	LINKTYPE0       =       "LAPB"
	LINKTYPE1       =       "LINK_NOTUSED"
	LINKCLK0        =       "CLK_EXT"
	LINKCLK1        =       "CLK_EXT"
	LINKDEV0        =       "DEV_DTE"
	LINKDEV1        =       "DEV_DTE"
	LINKMODUL0      =       "MODUL_8"
	LINKMODUL1      =       "MODUL_8"
	COMMCODE0       =       "CODE_NRZ"
	COMMCODE1       =       "CODE_NRZ"
	LINKWIN0        =       7
	LINKWIN1        =       7
    
[GeneralConstants]
from      = ""
to        = ""
ExitCodeOk     = 0
ExitCodeCancel = 1
ExitCodeFatal  = 2
KeyNull         = ""
MAXIMUM_ALLOWED   = 33554432
RegistryErrorIndex = NO_ERROR
KeyProduct      = ""
KeyParameters   = ""
TRUE            = 1
FALSE           = 0
NoTitle            = 0
ExitState   = "Active"
OldVersionExisted = $(FALSE)
DriverPath      = $(!STF_NTPATH)\drivers
[date]
    Now = {} ? $(!LIBHANDLE) GetSystemDate
[Identify]
    read-syms Identification
    set Status     = STATUS_SUCCESSFUL
    set Identifier = $(OptionType)
    set Media      = #("Source Media Descriptions", 1, 1)
    Return $(Status) $(Identifier) $(Media)
[ReturnOptions]
    set Status        = STATUS_FAILED
    set OptionList     = {}
    set OptionTextList = {}
    set LanguageList = ^(LanguagesSupported, 1)
    Ifcontains(i) $($0) in $(LanguageList)
	ifstr(i) $($1) == ""
	   goto returnoptions
	endif
	set PlatformList = ^(PlatformsSupported, 1)
	Ifcontains(i) $($1) in $(PlatformList)
	   goto returnoptions
	else
	   set Status = STATUS_NOTSUPPORTED
	   goto finish_ReturnOptions
	endif
    else
	set Status = STATUS_NOLANGUAGE
	goto finish_ReturnOptions
    endif
returnoptions = +
    set OptionList     = ^(Options, 1)
    set OptionTextList = ^(OptionsText$($0), 1)
    set Status         = STATUS_SUCCESSFUL
finish_ReturnOptions = +
    Return $(Status) $(OptionList) $(OptionTextList)
[InstallOption]
    set !G:DebugOutputControl = 1
    set Option   = $($1)
    set SrcDir   = $($2)
    set AddCopy  = $($3)
    set DoCopy   = $($4)
    set DoConfig = $($5)
    set LanguageList = ^(LanguagesSupported, 1)
    Ifcontains(i) $($0) NOT-IN $(LanguageList)
	Return STATUS_NOLANGUAGE
    endif
    set-subst LF = "\n"
    read-syms GeneralConstants
    read-syms FileConstants
    read-syms DialogConstants$(!STF_LANGUAGE)
    ifstr(i) $(!NTN_Origination) == "NCPA"
	set Continue = $(OK)
    endif
    read-syms FileConstants$(!STF_LANGUAGE)
    detect date
    set-title  $(FunctionTitle)
    set to   = Begin
    set from = Begin
    set CommonStatus = STATUS_SUCCESSFUL
    EndWait
Begin = +
    set ActivateDetection = FALSE
    Ifstr(i) $(!NTN_InstallMode) == deinstall
		set StartLabel = removeadapter
	else-Ifstr(i) $(!NTN_InstallMode) == Update
			set StartLabel = UpgradeSoftware
	else-Ifstr(i) $(!NTN_InstallMode) == bind
		set StartLabel = bindingadapter
	else-Ifstr(i) $(!NTN_InstallMode) == configure
		set CommonStatus = STATUS_REBOOT
		set ActivateDetection = TRUE
		set StartLabel = configureadapter
		Ifstr(i) $(ProductKeyName) == $(!NTN_RegBase)
			Debug-Output "Cannot configure the STONE 2000 driver software."
			Shell $(UtilityInf),RegistryErrorString,CANNOT_CONFIGURE_SOFTWARE
			ifint $($ShellCode) != $(!SHELL_CODE_OK)
				Debug-Output "ShellCode error: cannot get an error string."
				goto ShellCodeError
			endif
			set Error = $($R0)
			set from = end
			set to = end
			goto nonfatalinfo
		endif
    else
		set StartLabel = installadapter
		set OEM_ABANDON_OPTIONS = {}
		set OEM_ABANDON_SOFTWARE = FALSE
		set OEM_ABANDON_ON = TRUE
		set ActivateDetection = TRUE
    endif
    Debug-Output "OEMNADN2.INF: =================================================="
    Debug-Output "OEMNADN2.INF: STF_CWDIR is: "$(!STF_CWDIR)
    Debug-Output "OEMNADN2.INF: STF_LANGUAGE is: "$(!STF_LANGUAGE)
    Debug-Output "OEMNADN2.INF: Option is: "$(Option)
    Debug-Output "OEMNADN2.INF: !STF_NCDETECT  is: "$(!STF_NCDETECT)
    Debug-Output "OEMNADN2.INF: !STF_NCOPTION  is: "$(!STF_NCOPTION)
    Debug-Output "OEMNADN2.INF: !STF_NCDETCARD is: "$(!STF_NCDETCARD)
    Debug-Output "OEMNADN2.INF: !STF_NCDETINFO is: "$(!STF_NCDETINFO)
    Debug-Output "OEMNADN2.INF: =================================================="
    Set DetectedCard = FALSE
    set PCMCIA = 0
    set CardType = 0
    Ifstr(i) $(ActivateDetection) != TRUE
	Goto skipdetection
    Endif
;    Set TypeList = {{IRQ,IRQList,IRQValue},+
;                    {PCMCIA, PCMCIAList, PCMCIA},+
;                    {IOADDR, IOBaseAddrDecList, IOBaseAddrValue}}
;    Debug-Output "OEMNADN2.INF: Calling Param_BuildTypeLists"
;    Shell $(ParamInf) Param_BuildTypeLists $(Option) $(TypeList)
;    Set Status = $($R0)
;    ifstr(i) $(Status) != STATUS_SUCCESSFUL
;        Goto fataldetect
;    Endif
;    Debug-Output "OEMNADN2.INF: Calling Param_SetDefaults"
;    Shell $(ParamInf) Param_SetDefaults {}
;    Shell $(ParamInf) HexListFromDecList $(IOBaseAddrDecList)
;    Set IOBaseAddrHexList = $($R0)
;    Shell $(UtilityInf) SortList $(IRQList) TRUE FALSE
;    Set IRQList = $($R0)
;    Ifstr(i) $(!STF_NCDETECT) == YES
;        Ifstr(i) $(!STF_NCOPTION) == $(Option)
;           Set DetectedCard = TRUE
;           Debug-Output "OEMNADN2.INF: Setting DetectedCard to TRUE"
;        Endif
;    Endif
    Debug-Output $(InfName)": Calling Param_SetDefaults"
    Shell $(ParamInf) Param_SetDefaults {}

    Shell $(ParamInf) HexListFromDecList $(RAM_Addr_List)
    Set RAM_Hex_List = $($R0)
;GHL
    Shell $(ParamInf) HexListFromDecList $(IO_Addr_List)
    Set IO_Hex_List = $($R0)

    IfStr(i) $(!STF_NCDETECT) == YES
	IfStr(i) $(!STF_NCOPTION) == $(Option)
	   Set DetectedCard = TRUE
	   Debug-Output $(InfName)": Setting DetectedCard to TRUE"
	EndIf
    EndIf

skipdetection =+
    set from = $(fatal)
    set to = $(fatal)
    goto $(StartLabel)
installadapter = +
    OpenRegKey $(!REG_H_LOCAL) "" $(ProductKeyName) $(MAXIMUM_ALLOWED) KeyProduct
    Ifstr $(KeyProduct) != $(KeyNull)
	CloseRegKey $(KeyProduct)
	ifstr(i) !(NTN_RegBase) == $(ProductKeyName)
	   Shell $(UtilityInf), VerExistedDlg, $(ProductSoftware$(Option)Title),+
	       $(ProductVersion)
	   ifint $($ShellCode) != $(!SHELL_CODE_OK)
	       Debug-Output "ShellCode error: cannot get an error string."
	       goto ShellCodeError
	   endif
	   goto end
	else
	   Shell $(UtilityInf), CardExistedDlg
	   ifint $($ShellCode) != $(!SHELL_CODE_OK)
	       Debug-Output "ShellCode error: cannot get an error string."
	       goto ShellCodeError
	   endif
	   ifstr(i) $($R1) != "OK"
	       set CommonStatus = STATUS_USERCANCEL
	       goto end
	   endif
	   set OldVersionExisted = $(TRUE)
	endif
    endif
    Ifstr(i) $(DetectedCard) != TRUE
	Goto adaptersetup
    Endif
    StartWait
    Shell $(ParamInf) Param_QueryCard $(!STF_NCDETCARD)
    EndWait
    Ifstr(i) $($R0) != STATUS_SUCCESSFUL
	Goto adaptersetup
    Endif
    Set DetectedParams = $($R1)
    Debug-Output "OEMNADN2.INF: Calling Param_SetDefaults to merge detected params"
    Shell $(ParamInf) Param_SetDefaults $(DetectedParams)
    goto adapteroptions
configureadapter = +
    Ifstr $(KeyProduct) == $(KeyNull)
	OpenRegKey $(!REG_H_LOCAL) "" $(!NTN_RegBase) $(MAXIMUM_ALLOWED) KeyProduct
	Ifstr $(KeyProduct) == $(KeyNull)
	    set RegistryErrorIndex = CANNOT_FIND_COMPONENT_SERVICE
	    Debug-Output "Cannot find component product key"
	    goto fatalregistry
	Endif
    Endif
    Debug-Output "INF: Shelling to FindService"
    Shell $(UtilityInf) FindService, $(KeyProduct)
    Ifint $($ShellCode) != $(!SHELL_CODE_OK)
	Debug-Output "INF: FindService shell failure"
	Goto ShellCodeError
    Endif
    Ifstr(i) $($R0) != NO_ERROR
	Debug-Output "INF: FindService Shell error: "$($R0)
	Goto fatalregistry
    endif
    set KeyParameters = $($R2)
    CloseRegKey $($R1)
    Ifstr $(KeyParameters) == $(KeyNull)
	set RegistryErrorIndex = CANNOT_FIND_COMPONENT_SERVICE
	Debug-Output "Cannot find component service"
	goto fatalregistry
    endif
    set OldVersionExisted = $(TRUE)
    set ValueName = ""
    set ValueData = ""
    set ValueStr  = ""
    set ValueList = {}
    EnumRegValue $(KeyParameters) ValueList
    ForListDo $(ValueList)
	set ValueItem = $($)
	set ValueName = *($(ValueItem),1)
	set ValueData = *($(ValueItem),4)
;        Ifstr(i) $(ValueName) == "InterruptNumber"
;            set IRQValue = $(ValueData)
;        else-ifstr(i) $(ValueName) == "IoBaseAddress"
;            set IOBaseAddrValue = $(ValueData)
	ifstr(i) $(ValueName) == "BusType"
	    set BusInterfaceType = $(ValueData)
	else-ifstr(i) $(ValueName) == "PCMCIA"
	    set PCMCIA = $(ValueData)
	else-ifstr(i) $(ValueName) == "BusNumber"
	    set BusNumber = $(ValueData)
    ;GHL
	Else-IfStr(i) $(ValueName) == "RamBaseAddress"
	    Set RamBaseAddress = $(ValueData)
	Else-IfStr(i) $(ValueName) == "IoBaseAddress"
	    Set IoBaseAddress = $(ValueData)
	Else-IfStr(i) $(ValueName) == "InterruptNumber"
	    Set InterruptNumber = $(ValueData)
	Else-IfStr(i) $(ValueName) == "LineType"
	    Set LineType = $(ValueData)
;       Else-IfStr(i) $(ValueName) == "BusNumber"
;           set BusNumber = $(ValueData)
;       Else-IfStr(i) $(ValueName) == "BusType"
;           set BusType = $(ValueData)
	Else-IfStr(i) $(ValueName) == "BAUDRATE0"
	    set BAUDRATE0 = $(ValueData)
	Else-IfStr(i) $(ValueName) == "LINKADDR0"
	    set LINKADDR0 = $(ValueData)
	Else-IfStr(i) $(ValueName) == "LINKTYPE0"
	    set LINKTYPE0 = $(ValueData)
	Else-IfStr(i) $(ValueName) == "LINKCLK0"
	    set LINKCLK0 = $(ValueData)
	Else-IfStr(i) $(ValueName) == "LINKDEV0"
	    set LINKDEV0 = $(ValueData)
	Else-IfStr(i) $(ValueName) == "LINKMODUL0"
	    set LINKMODUL0 = $(ValueData)
	Else-IfStr(i) $(ValueName) == "LINKCODE0"
	    set LINKCODE0 = $(ValueData)
	Else-IfStr(i) $(ValueName) == "LINKN20"
	    set LINKN20 = $(ValueData)
	Else-IfStr(i) $(ValueName) == "LINKT10"
	    set LINKT10 = $(ValueData)
	Else-IfStr(i) $(ValueName) == "FRAMELEN0"
	    set FRAMELEN0 = $(ValueData)
	Else-IfStr(i) $(ValueName) == "BAUDRATE1"
	    set BAUDRATE1 = $(ValueData)
	Else-IfStr(i) $(ValueName) == "LINKADDR1"
	    set LINKADDR1 = $(ValueData)
	Else-IfStr(i) $(ValueName) == "LINKTYPE1"
	    set LINKTYPE1 = $(ValueData)
	Else-IfStr(i) $(ValueName) == "LINKCLK1"
	    set LINKCLK1 = $(ValueData)
	Else-IfStr(i) $(ValueName) == "LINKDEV1"
	    set LINKDEV1 = $(ValueData)
	Else-IfStr(i) $(ValueName) == "LINKMODUL1"
	    set LINKMODUL1 = $(ValueData)
	Else-IfStr(i) $(ValueName) == "LINKCODE1"
	    set LINKCODE1 = $(ValueData)
	Else-IfStr(i) $(ValueName) == "LINKN21"
	    set LINKN21 = $(ValueData)
	Else-IfStr(i) $(ValueName) == "LINKT11"
	    set LINKT11 = $(ValueData)
	Else-IfStr(i) $(ValueName) == "FRAMELEN1"
	    set FRAMELEN1 = $(ValueData)
       endif
    EndForListDo
;    ifstr(i) $(IRQValue) == ""
;        set IRQValue = *($(IRQ_List), 2)
;    endif
;    ifstr(i) $(IOBaseAddrValue) == ""
;        set IOBaseAddrValue = *($(IO_Addr_List), 1)
;    endif
adaptersetup =+

    Shell $(ParamInf) Param_ParameterConfidence
    Ifstr(i) $($R0) != STATUS_SUCCESSFUL
	Debug-Output "OEMNADE2.INF: parameter confidence too low to bypass configuration"
	Goto adapteroptions
    Endif
    Ifstr(i) $(DetectedCard) == TRUE
	Ifstr(i) $(!STF_INSTALL_MODE) != CUSTOM
	    Goto adapterverify
	Endif
    Endif
    goto adapteroptions
adapteroptions = +
    set from = adapteroptions
;ghl
    Set InterruptNumber = *($(IRQ_List), ~($(IRQ_List),$(InterruptNumber)))
    Set RAM_Hex_Value = *($(RAM_Hex_List), ~($(RAM_Addr_List),$(RamBaseAddress)))
    Debug-Output "AdapterSetup IoBaseAddress"$(IoBaseAddress)
    Debug-Output "AdapterSetup RamBaseAddress"$(RamBaseAddress)
    Set IO_Hex_Value = *($(IO_Hex_List), ~($(IO_Addr_List),$(IoBaseAddress)))
    set BusInterfacetype = 1
    set BusNumber = 0
;    ifstr(i) $(!STF_GUI_UNATTENDED) == "YES"
;        ifstr(i) $(!AutoNetInterfaceType) != ""
;            set BusInterfaceType = $(!AutoNetInterfaceType)
;        else
;            set BusInterfaceType = 1    
;        endif
;        ifstr(i) $(!AutoNetBusNumber) != ""
;            set BusNumber = $(!AutoNetBusNumber)
;        else
;            set BusNumber = 0
;        endif
;        goto adapterverify
;    endif
;    set IOBaseAddress = *($(IOBaseAddrHexList), ~($(IOBaseAddrDecList),+
;        $(IOBaseAddrValue)))
;    read-syms FileDependentDlg$(!STF_LANGUAGE)
;    ui start "InputDlg"
;    ifstr(i) $(DLGEVENT) == "CONTINUE"
;                set IRQValue = $(Combo1Out)
;                set IOBaseAddress = $(Combo2Out)
;                ui pop 1
;    else-ifstr(i) $(DLGEVENT) == "BACK"
;                set CommonStatus = STATUS_USERCANCEL
;                Debug-Output "Action: exit. Bye."
;                ui pop 1
;                goto end
;    else
;                ui pop 1
;                Debug-Output "Action: unknown. Bye."
;                goto end
;    endif
;    set IOBaseAddrValue = *($(IOBaseAddrDecList), ~($(IOBaseAddrHexList),+
;        $(IOBaseAddress)))
    Read-Syms FileDependentDlg$(!STF_LANGUAGE)
    UI Start "InputDlg"
    IfStr(i) $(DLGEVENT) == "CONTINUE"
	Set InterruptNumber = $(Combo1Out)
	Set RAM_Hex_Value = $(Combo2Out)
	Set IO_Hex_Value = $(Combo3Out)
	Set RamBaseAddress = *($(RAM_Addr_List), ~($(RAM_Hex_List),$(RAM_Hex_Value)))
	Set IoBaseAddress = *($(IO_Addr_List), ~($(IO_Hex_List),$(IO_Hex_Value)))
	ui pop 1
    Else-IfStr(i) $(DLGEVENT) == "BACK"
	Set CommonStatus = STATUS_USERCANCEL
	Debug-Output $(InfName)": Action: exit. Bye."
	ui pop 1
	GoTo end
    Else
	Debug-Output $(InfName)": Action: unknown. Bye."
	ui pop 1
	GoTo end
    EndIf
    ifstr(i) $(!STF_NCDETINFO) == {}
	ifint $(PCMCIA) != 1
	    Shell $(UtilityInf),GetBusTypeDialog,$(ProductHardware$(Option)Description) $(BusInterfaceType) $(BusNumber)
	    ifint $($ShellCode) != $(!SHELL_CODE_OK)
		Debug-Output "ShellCode error."
		goto ShellCodeError
	    endif
	    set BusInterfaceType = $($R1)
	    set BusNumber = $($R2)
	else
	    set BusInterfaceType = 1
	    set BusNumber = 0
	endif
    else
	set BusInterfaceType = *($(!STF_NCDETINFO),5)
	set BusNumber = *($(!STF_NCDETINFO),6)
    endif
adapterverify =+
    Ifstr(i) $(DetectedCard) != TRUE
	Goto skipoptions
    Endif
    Debug-Output "OEMNADN2.INF: Calling Param_VerifyCard"
    Shell $(ParamInf) Param_VerifyCard $(!STF_NCDETCARD)
    Ifstr(i) $($R0) == STATUS_SUCCESSFUL
	Debug-Output "OEMNADN2.INF: Param_VerifyCard succeeded"
	Goto skipoptions
    Endif
    Set from = adapteroptions
    Set to = skipoptions
    Shell $(UtilityInf),RegistryErrorString,VERIFY_WARNING
    ifint $($ShellCode) != $(!SHELL_CODE_OK)
	Debug-Output "ShellCode error: cannot get an error string."
	goto ShellCodeError
    endif
    set Error = $($R0)
    Goto Warning
skipoptions =+
    ifint $(OldVersionExisted) == $(TRUE)
	ifstr(i) $(!NTN_InstallMode) == configure
		goto writeparameters
	endif
    endif
    StartWait
    ifint $(OldVersionExisted) == $(FALSE)
	ifstr(i) $(!NTN_InstallMode) == "install"
		Ifstr(i) $(DoCopy) == "YES"
		    Shell $(UtilityInf), DoAskSource, $(!STF_CWDDIR), $(SrcDir) YES
		    Ifint $($ShellCode) != $(!SHELL_CODE_OK)
			Goto ShellCodeError
		    Else-Ifstr(i) $($R0) == STATUS_FAILED
			Shell $(UtilityInf) RegistryErrorString "ASK_SOURCE_FAIL"
			ifint $($ShellCode) != $(!SHELL_CODE_OK)
			   goto ShellCodeError
			endif
			set Error = $($R0)
			Goto fatal
		    Else-Ifstr(i) $($R0) == STATUS_USERCANCEL
			Goto successful
		    Endif
		    Set SrcDir = $($R1)
		Endif
		install "Install-Option"
		ifstr(i) $(STF_INSTALL_OUTCOME) != STF_SUCCESS
		    Shell $(UtilityInf) RegistryErrorString "UNABLE_COPY_FILE"
		    ifint $($ShellCode) != $(!SHELL_CODE_OK)
			goto ShellCodeError
		    endif
		    set Error = $($R0)
		    goto fatal
		endif
	endif
       Shell $(UtilityInf), AddSoftwareComponent, $(Manufacturer), +
			$(ProductSoftwareName), +
			$(ProductSoftwareName), +
			$(ProductSoftware$(Option)Title), $(STF_CONTEXTINFNAME), +
			$(ProductSoftwareImagePath), "kernel", "NDIS", {}, "",+
			$(NetEventDLL)
       Set OEM_ABANDON_SOFTWARE = TRUE
       ifint $($ShellCode) != $(!SHELL_CODE_OK)
	Debug-Output "ShellCode error"
	goto ShellCodeError
       endif
       set RegistryErrorIndex = $($R0)
       set KeyProduct      = $($R1)
       Set SoftNetRulesKey = $($R2)
       CloseRegKey $($R3)
       CloseRegKey $($R4)
       CloseRegKey $($R5)
       Ifstr(i) $(RegistryErrorIndex) != NO_ERROR
	EndWait
	Debug-Output "Registry error: add software components"
	CloseRegKey $(KeyProduct)
	CloseRegKey $(SoftNetRulesKey)
	goto fatalregistry
       endif
       set NewValueList = {{SoftwareType,$(NoTitle),$(!REG_VT_SZ),$(SoftwareType)},+
		   {MajorVersion,$(NoTitle),$(!REG_VT_DWORD),$(ProductMajorVersion)},+
		   {MinorVersion,$(NoTitle),$(!REG_VT_DWORD),$(ProductMinorVersion)},+
		   {Title,$(NoTitle),$(!REG_VT_SZ),$(ProductSoftware$(Option)Title)},+
		   {Description,$(NoTitle),$(!REG_VT_SZ),$(ProductSoftware$(Option)Description)},+
		   {ServiceName,$(NoTitle),$(!REG_VT_SZ),$(ProductSoftwareName)},+
		   {InstallDate,$(NoTitle),$(!REG_VT_DWORD),*($(Now),1)}}
       Shell  $(UtilityInf), AddValueList, $(KeyProduct), $(NewValueList)
       ifint $($ShellCode) != $(!SHELL_CODE_OK)
	Debug-Output "ShellCode error."
	goto ShellCodeError
       endif
       set RegistryErrorIndex = $($R0)
       Ifstr(i) $(RegistryErrorIndex) != NO_ERROR
	EndWait
	Debug-Output "Registry error: add value list."
	CloseRegKey $(KeyProduct)
	CloseRegKey $(SoftNetRulesKey)
	goto fatalregistry
       endif
       set NewValueList = {{type,$(NoTitle),$(!REG_VT_SZ),$(NetRuleSoftwareType)},+
			{use,$(NoTitle),$(!REG_VT_SZ),$(NetRuleSoftwareUse)}, +
			{bindform,$(NoTitle),$(!REG_VT_SZ),$(NetRuleSoftwareBindForm)}, +
			{class,$(NoTitle),$(!REG_VT_MULTI_SZ),$(NetRuleSoftwareClass)}, +
			{bindable,$(NoTitle),$(!REG_VT_MULTI_SZ),$(NetRuleSoftwareBindable)}, +
			{InfOption,$(NoTitle),$(!REG_VT_SZ),$(Option)}}
       Shell  $(UtilityInf), AddValueList, $(SoftNetRulesKey), $(NewValueList)
       ifint $($ShellCode) != $(!SHELL_CODE_OK)
	Debug-Output "ShellCode error."
	goto ShellCodeError
       endif
       set RegistryErrorIndex = $($R0)
       CloseRegKey $(KeyProduct)
       CloseRegKey $(SoftNetRulesKey)
       Ifstr(i) $(RegistryErrorIndex) != NO_ERROR
	EndWait
	Debug-Output "Resgitry error: add value list."
	goto fatalregistry
       endif
    endif
    Shell $(UtilityInf), AddHardwareComponent, $(ProductHardwareName),$(STF_CONTEXTINFNAME),$(ProductKeyName)
    ifint $($R4) != -1
		Set OEM_ABANDON_OPTIONS = >($(OEM_ABANDON_OPTIONS), $(!NTN_SoftwareBase)"\Microsoft\Windows NT\CurrentVersion\NetworkCards\"$($R4))
    endif
    ifint $($ShellCode) != $(!SHELL_CODE_OK)
		Debug-Output "Cannot add hardware component"
		goto ShellCodeError
    endif
    set RegistryErrorIndex = $($R0)
    Ifstr(i) $(RegistryErrorIndex) != NO_ERROR
		EndWait
		Debug-Output "Registry error: add hardware component"
		CloseRegKey $($R1)
		CloseRegKey $($R2)
		CloseRegKey $($R3)
		goto fatalregistry
    endif
    set KeyParameters = $($R3)
    set KeyAdapterRules = $($R2)
    set AdapterNumber = $($R4)
    set NewValueList = {{Manufacturer,$(NoTitle),$(!REG_VT_SZ),$(Manufacturer)},+
		       {Title,$(NoTitle),$(!REG_VT_SZ),"["$($R4)"] "$(ProductHardware$(Option)Title)},+
		       {Description,$(NoTitle),$(!REG_VT_SZ),$(ProductHardware$(Option)Description)},+
		       {ProductName,$(NoTitle),$(!REG_VT_SZ),$(ProductHardwareName)},+
		       {ServiceName,$(NoTitle),$(!REG_VT_SZ),$($R5)},+
		       {InstallDate,$(NoTitle),$(!REG_VT_DWORD),*($(Now),1)}}
    Shell  $(UtilityInf), AddValueList, $($R1), $(NewValueList)
    ifint $($ShellCode) != $(!SHELL_CODE_OK)
		Debug-Output "ShellCode error"
		goto ShellCodeError
    endif
    CloseRegKey $($R1)
    set TempProdName = """"$(ProductHardwareName)$(AdapterNumber)""""
    set TempBindForm = $(TempProdName)$(NetRuleHardwareBindForm)
    set NewValueList = {{type,$(NoTitle),$(!REG_VT_SZ),$(NetRuleHardwareType)},+
			{bindform,$(NoTitle),$(!REG_VT_SZ),$(TempBindForm)}, +
			{class,$(NoTitle),$(!REG_VT_MULTI_SZ),$(NetRuleHardwareClass)}, +
			{InfOption,$(NoTitle),$(!REG_VT_SZ),$(Option)}}
    Shell  $(UtilityInf), AddValueList, $(KeyAdapterRules), $(NewValueList)
    ifint $($ShellCode) != $(!SHELL_CODE_OK)
		Debug-Output "ShellCode error."
		goto ShellCodeError
    endif
    set RegistryErrorIndex = $($R0)
    Ifstr(i) $(RegistryErrorIndex) != NO_ERROR
		EndWait
		Debug-Output "Resgitry error: add value list."
		CloseRegKey $(KeyParameters)
		CloseRegKey $(KeyAdapterRules)
		goto fatalregistry
    endif
    CloseRegKey $(KeyAdapterRules)
    goto writeparameters
writeparameters = +
    ifint $(BusInterfaceType) == 8
	set PCMCIA = 1
	set BusInterfaceType = 1
    endif
;    set NewValueList = {{InterruptNumber,$(NoTitle),$(!REG_VT_DWORD),$(IRQValue)},+
	set NewValueList = {+
		       {BusType,$(NoTitle),$(!REG_VT_DWORD),$(BusInterfaceType)},+
		       {BusNumber,$(NoTitle),$(!REG_VT_DWORD),$(BusNumber)},+
		       {MediaType,$(NoTitle),$(!REG_VT_DWORD),1},+
		       {CardType,$(NoTitle),$(!REG_VT_DWORD),0},+
;                       {IoBaseAddress,$(NoTitle),$(!REG_VT_DWORD),$(IOBaseAddrValue)},+
;ghl
;                      {AddressList,$(NoTitle),$(!REG_VT_MULTI_SZ),$(TapiAddressList)},+
;                      {BusNumber,$(NoTitle),$(!REG_VT_DWORD),$(BusNumber)},+
;                      {BusType,$(NoTitle),$(!REG_VT_DWORD),$(BusType)},+
;                      {DeviceName,$(NoTitle),$(!REG_VT_SZ),$(ProductHardwareName)},+
		       {InterruptNumber,$(NoTitle),$(!REG_VT_DWORD),$(InterruptNumber)},+
;                      {LineType,$(NoTitle),$(!REG_VT_DWORD),$(LineType)},+
;                      {MediaType,$(NoTitle),$(!REG_VT_SZ),$(TapiMediaType)},+
		       {RamBaseAddress,$(NoTitle),$(!REG_VT_DWORD),$(RamBaseAddress)},+
		       {IoBaseAddress,$(NoTitle),$(!REG_VT_DWORD),$(IoBaseAddress)},+
		       {BAUDRATE0,$(NoTitle),$(!REG_VT_DWORD),$(BAUDRATE0)},+
		       {LINKADDR0,$(NoTitle),$(!REG_VT_DWORD),$(LINKADDR0)},+
		       {LINKTYPE0,$(NoTitle),$(!REG_VT_SZ),$(LINKTYPE0)},+
		       {LINKCLK0,$(NoTitle),$(!REG_VT_SZ),$(LINKCLK0)},+
		       {LINKDEV0,$(NoTitle),$(!REG_VT_SZ),$(LINKDEV0)},+
		       {LINKMODUL0,$(NoTitle),$(!REG_VT_SZ),$(LINKMODUL0)},+
		       {COMMCODE0,$(NoTitle),$(!REG_VT_SZ),$(COMMCODE0)},+
		       {LINKWIN0,$(NoTitle),$(!REG_VT_DWORD),$(LINKWIN0)},+
		       {LINKN20,$(NoTitle),$(!REG_VT_DWORD),$(LINKN20)},+
		       {LINKT10,$(NoTitle),$(!REG_VT_DWORD),$(LINKT10)},+
		       {FRAMELEN0,$(NoTitle),$(!REG_VT_DWORD),$(FRAMELEN0)},+
		       {BAUDRATE1,$(NoTitle),$(!REG_VT_DWORD),$(BAUDRATE1)},+
		       {LINKADDR1,$(NoTitle),$(!REG_VT_DWORD),$(LINKADDR1)},+
		       {LINKTYPE1,$(NoTitle),$(!REG_VT_SZ),$(LINKTYPE1)},+
		       {LINKCLK1,$(NoTitle),$(!REG_VT_SZ),$(LINKCLK1)},+
		       {LINKDEV1,$(NoTitle),$(!REG_VT_SZ),$(LINKDEV1)},+
		       {LINKMODUL1,$(NoTitle),$(!REG_VT_SZ),$(LINKMODUL1)},+
		       {COMMCODE1,$(NoTitle),$(!REG_VT_SZ),$(COMMCODE1)},+
		       {LINKWIN1,$(NoTitle),$(!REG_VT_DWORD),$(LINKWIN1)},+
		       {LINKN21,$(NoTitle),$(!REG_VT_DWORD),$(LINKN21)},+
		       {LINKT11,$(NoTitle),$(!REG_VT_DWORD),$(LINKT11)},+
		       {FRAMELEN1,$(NoTitle),$(!REG_VT_DWORD),$(FRAMELEN1)}+
		       }
    Shell  $(UtilityInf), AddValueList, $(KeyParameters), $(NewValueList)
    ifint $(PCMCIA) == 1
	set NewValueList = {{Pcmcia,$(NoTitle),$(!REG_VT_DWORD),1}}
	Shell  $(UtilityInf), AddValueList, $(KeyParameters), $(NewValueList)
    else
	DeleteRegValue $(KeyParameters) "Pcmcia"
    endif
    ifstr(i) $(!STF_GUI_UNATTENDED) == "YES"
	Shell $(UtilityInf),AddDefaultNetCardParameters,$(KeyParameters)
    endif
    CloseRegKey $(KeyParameters)
    ifint $($ShellCode) != $(!SHELL_CODE_OK)
		Debug-Output "ShellCode error."
		goto ShellCodeError
    endif
    set RegistryErrorIndex = $($R0)
    Ifstr(i) $(RegistryErrorIndex) != NO_ERROR
		Debug-Output "Registry error: Add value list"
		goto fatalregistry
    endif

;;;;;;;;;;;;;;;;;adden by fang hui
	RunProgram ExitCode "" "" $(!STF_WINDOWSSYSPATH)\cfg.EXE  $(AdapterNumber)
	
;;;;;;;;;;;;;;;;;;;;;;;;
    EndWait
    goto successful
bindingadapter =+
    set Error = "Binding: Sorry, not yet implemented."
    goto fatal
removeadapter = +
    Ifstr(i) $(ProductKeyName) == $(!NTN_RegBase)
		Shell $(UtilityInf), RemoveSoftwareComponent, $(Manufacturer), +
				$(ProductSoftwareName)
		ifint $($ShellCode) != $(!SHELL_CODE_OK)
				Debug-Output "ShellCode error"
				goto ShellCodeError
		endif
		set RegistryErrorIndex = $($R0)
		Ifstr(i) $(RegistryErrorIndex) != NO_ERROR
				goto fatalregistry
		endif
    else
		Shell $(UtilityInf), RemoveHardwareComponent, $(Manufacturer), +
			$(ProductSoftwareName), $(!NTN_RegBase)
		ifint $($ShellCode) != $(!SHELL_CODE_OK)
				Debug-Output "ShellCode error"
				goto ShellCodeError
		endif
		set RegistryErrorIndex = $($R0)
		Ifstr(i) $(RegistryErrorIndex) != NO_ERROR
				goto fatalregistry
		endif
    endif
    goto end
UpgradeSoftware = +
    OpenRegKey $(!REG_H_LOCAL) "" $(ProductKeyName) $(MAXIMUM_ALLOWED) KeyProduct
    Ifstr $(KeyProduct) != $(KeyNull)
	install "Install-Update"
	ifstr(i) $(STF_INSTALL_OUTCOME) != STF_SUCCESS
	    goto fatal
	endif
	SetRegValue $(KeyProduct) {MajorVersion,$(NoTitle),$(!REG_VT_SZ),$(ProductMajorVersion)}
	SetRegValue $(KeyProduct) {MinorVersion,$(NoTitle),$(!REG_VT_SZ),$(ProductMinorVersion)}
	CloseRegKey $(KeyProduct)
    else
	goto fatalregistry
    endif
    goto end
successful = +
    goto end
abandon = +
    ForListDo $(OEM_ABANDON_OPTIONS)
	Shell $(UtilityInf), RemoveHardwareComponent, $(Manufacturer), +
	    $(ProductSoftwareName), $($)
	ifint $($ShellCode) != $(!SHELL_CODE_OK)
	    Debug-Output "ShellCode error"
	    goto ShellCodeError
	endif
	set RegistryErrorIndex = $($R0)
	Ifstr(i) $(RegistryErrorIndex) != NO_ERROR
	    goto fatalregistry
	endif
    EndForListDo
    Ifstr(i) $(OEM_ABANDON_SOFTWARE) == TRUE
	Shell $(UtilityInf), RemoveSoftwareComponent, $(Manufacturer), +
	    $(ProductSoftwareName), FALSE
	ifint $($ShellCode) != $(!SHELL_CODE_OK)
	    Debug-Output "ShellCode error"
	    goto ShellCodeError
	endif
	set RegistryErrorIndex = $($R0)
	Ifstr(i) $(RegistryErrorIndex) != NO_ERROR
	    goto fatalregistry
	endif
    endif
    goto end
warning = +
    Shell $(subroutineinf) SetupMessage, $(!STF_LANGUAGE), "WARNING", $(Error)
    ifint $($ShellCode) != $(!SHELL_CODE_OK)
	goto ShellCodeError
    endif
    ifstr(i) $($R1) == "OK"
	goto $(to)
    else-ifstr(i) $($R1) == "CANCEL"
	goto $(from)
    else
	goto "end"
    endif
nonfatalinfo = +
    Set CommonStatus = STATUS_USERCANCEL
    Set Severity = STATUS
    goto nonfatalmsg
nonfatal = +
    Set Severity = NONFATAL
    goto nonfatalmsg
nonfatalmsg = +
    ifstr(i) $(Error) == ""
	Set Severity = NONFATAL
	Shell $(UtilityInf) RegistryErrorString "SETUP_FAIL"
	ifint $($ShellCode) != $(!SHELL_CODE_OK)
	    goto ShellCodeError
	endif
	set Error = $($R0)
    endif
    Shell $(subroutineinf) SetupMessage, $(!STF_LANGUAGE), $(Severity), $(Error)
    ifint $($ShellCode) != $(!SHELL_CODE_OK)
	goto ShellCodeError
    endif
    ifstr(i) $($R1) == "OK"
	goto $(from)
    else
	goto "end"
    endif
fatalregistry = +
    Shell $(UtilityInf) RegistryErrorString $(RegistryErrorIndex)
    ifint $($ShellCode) != $(!SHELL_CODE_OK)
	goto ShellCodeError
    endif
    set Error = $($R0)
    goto fatal
fataldetect = +
    Shell $(UtilityInf),RegistryErrorString,CANNOT_DETECT
    ifint $($ShellCode) != $(!SHELL_CODE_OK)
	Debug-Output "ShellCode error: cannot get an error string."
	goto ShellCodeError
    endif
    set Error = $($R0)
    Goto fatal
fatal = +
    ifstr(i) $(Error) == ""
	Shell $(UtilityInf) RegistryErrorString "SETUP_FAIL"
	ifint $($ShellCode) != $(!SHELL_CODE_OK)
	    goto ShellCodeError
	endif
	set Error = $($R0)
    endif
    Shell $(subroutineinf) SetupMessage, $(!STF_LANGUAGE), "FATAL", $(Error)
    ifint $($ShellCode) != $(!SHELL_CODE_OK)
	goto ShellCodeError
    endif
    goto setfailed
ShellCodeError = +
    set DlgType      = "MessageBox"
    set STF_MB_TITLE = $(ShellCodeErrorTitle)
    set STF_MB_TEXT  = $(ShellCodeErrorText)
    set STF_MB_TYPE  = 1
    set STF_MB_ICON  = 3
    set STF_MB_DEF   = 1
    ui start "Error Message"
    goto setfailed
setfailed = +
    set CommonStatus = STATUS_FAILED
    ifstr(i) $(OEM_ABANDON_ON) == TRUE
	set OEM_ABANDON_ON = FALSE
	goto abandon
    endif
    goto end
end = +
    goto term
term = +
    Return $(CommonStatus)
[Install-Option]
    set STF_VITAL = ""
    ifstr(i) $(AddCopy) == "YES"
	AddSectionFilesToCopyList Files-$(Option) $(SrcDir) $(!STF_WINDOWSSYSPATH)\drivers
	    AddSectionFilesToCopyList Files-Append $(SrcDir) $(!STF_WINDOWSSYSPATH)
    endif
    ifstr(i) $(DoCopy) == "YES"
       set !STF_NCPA_FLUSH_COPYLIST = TRUE
       CopyFilesInCopyList
    endif
    ifstr(i) $(DoConfig) == "YES"
    endif
    Exit
[Install-Update]
   set STF_VITAL        = ""
   set STF_OVERWRITE    = "VERIFYSOURCEOLDER"
   AddSectionFilesToCopyList Files-$(Option) $(SrcDir) $(!STF_WINDOWSSYSPATH)\drivers
   exit
[Source Media Descriptions]
    1 = "disk #1" , TAGFILE = mpcc.sys
[Signature]
    FileType = MICROSOFT_FILE
[GetSignature]
    read-syms Signature
    return $(FileType)
[ProductType]
STF_PRODUCT  = Winnt
STF_PLATFORM = I386
[Files-Inf]
2,      oemsetup.inf,    SIZE=1000,     RENAME=$(!UG_Filename)
[Files-MPCC]
1,MPCC.SYS , SIZE=24576
[Files-MPCCPCMCIA]
1,MPCC.SYS , SIZE=24576
[Files-MPCCSOCKETEA]
1,MPCC.SYS , SIZE=24576

[Files-Append]
    1 ,cfg.exe
;;;;;;;;;;;;;;;;by fang hui

[LanguagesSupported]
    ENG
[OptionsTextENG]
    MPCC              = "STONE MPCC Compatible Adapter"
    MPCCSOCKETEA      = "STONE MPCC Socket EA Adapter"
[FileConstantsENG]
ProCaption   = "Windows NT Setup"
ProCancel    = "Cancel"
ProCancelMsg = "Windows NT Networking is not correctly installed.  "+
	       "Are you sure you want to cancel copying files?"
ProCancelCap = "Network Setup Message"
ProText1     = "Copying:"
ProText2     = "To:"
FunctionTitle   = "STONE MPCC Network Card Setup"
ProductSoftwareMPCCDescription      = "STONE MPCC Adapter Driver"
ProductSoftwareMPCCSOCKETEADescription      = "STONE MPCC Socket EA Adapter Driver"
ProductHardwareMPCCDescription        = "STONE MPCC Adapter"
ProductHardwareMPCCSOCKETEADescription        = "STONE MPCC Socket EA Adapter"
ProductSoftwareMPCCTitle    = "STONE MPCC Adapter Driver"
ProductSoftwareMPCCSOCKETEATitle    = "STONE MPCC Socket EA Adapter Driver"
ProductHardwareMPCCTitle      = "STONE MPCC Adapter"
ProductHardwareMPCCSOCKETEATitle      = "STONE MPCC Socket EA Adapter"
ShellCodeErrorTitle     = "Error: "$(FunctionTitle)
ShellCodeErrorText      = "Shell Code Error."
[DialogConstantsENG]
Help        = "&Help"
Exit        = "Cancel"
OK          = "OK"
HelpContext = ""
Continue    = "Continue"
Cancel      = "Cancel"
[FileDependentDlgENG]
;Label1 = "&IRQ Level:"
;Label2 = "I/O &Port Address:"
;DlgType = "RadioCombination"
;DlgTemplate = "MPCC"
;Caption = $(FunctionTitle)
;Combo1List = $(IRQList)
;Combo1Out  = $(IRQValue)
;Combo2List = $(IOBaseAddrHexList)
;Combo2Out  = $(IOBaseAddress)
;ComboListItemsIn  = {Combo1List, Combo2List}
;ComboListItemsOut = {Combo1Out, Combo2Out}
;EditTextIn = ""
;EditTextLim = ""
;CBOptionsGreyed = {}
;NotifyFields = {NO, NO}
;HelpContext = $(!IDH_DB_OEMNADN2_INS)
;GHL
    Label1              = "&IRQ Level:"
    Label2              = "&RAM Base Address:"
    Label3              = "I&O Base Address:"
    DlgType             = "RadioCombination"
    DlgTemplate         = "UBNDIS"
    Caption             = $(FunctionTitle)$(Option)
    Combo1List          = $(IRQ_List)
    Combo1Out           = $(InterruptNumber)
    Combo2List          = $(RAM_Hex_List)
    Combo2Out           = $(RAM_Hex_Value)
    Combo3List          = $(IO_Hex_List)
    Combo3Out           = $(IO_Hex_Value)
    ComboListItemsIn    = {Combo1List, Combo2List, Combo3List}
    ComboListItemsOut   = {Combo1Out, Combo2Out, Combo3Out}
    EditTextIn          = ""
    EditTextLim         = ""
    CBOptionsGreyed     = {}
    NotifyFields        = {NO, NO, NO}
;    HelpContext         = $(!IDH_DB_OEMNADN2_INS)

